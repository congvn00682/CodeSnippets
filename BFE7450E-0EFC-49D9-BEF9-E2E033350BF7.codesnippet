<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string></string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>// MARK: Resolve Dynamic Link
extension AppDelegate {

    // MARK: Handle links received as Universal Links when the app is already installed (on iOS 9 and newer)
    func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -&gt; Void) -&gt; Bool {
        
        guard let webpageURL = userActivity.webpageURL else { return false }
        
        let handled = DynamicLinks.dynamicLinks()
        .handleUniversalLink(webpageURL) { [weak self] (dynamicLink, error) in
            guard let strongSelf = self,
                let unwrappedDynamicLink = dynamicLink,
                error == nil else {
                return
            }
            strongSelf.handleDynamicLink(unwrappedDynamicLink)
        }
        return handled
    }

    // MARK: Handle links received through your app's custom URL scheme (on iOS 9 and newer), and when your app is opened for the first time after installation.
    func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -&gt; Bool {
        var isHandled = false
        let sourceApp = UIApplication.OpenURLOptionsKey.sourceApplication
        
        if let dynamicLink = DynamicLinks.dynamicLinks().dynamicLink(fromCustomSchemeURL: url) {
            self.handleDynamicLink(dynamicLink)
            isHandled = true
            return isHandled
        }

        let sdkApplicationDelegate = ApplicationDelegate.shared.application(app, open: url, sourceApplication: options[sourceApp] as? String, annotation: options)

        let canHandleGoogleSignIn = GIDSignIn.sharedInstance()?.handle(url, sourceApplication: options[sourceApp] as? String, annotation: options)
        
        if sdkApplicationDelegate {
            isHandled = sdkApplicationDelegate
        } else if canHandleGoogleSignIn ?? false {
            isHandled = true
        } else {
            isHandled = false
        }
        return isHandled
    }

    private func handleDynamicLink(_ dynamicLink: DynamicLink) {
        guard let url = dynamicLink.url else {
            print("Dynamic link object has no url")
            return
        }
        print("My dynamic link \(url)")

        guard let components = URLComponents(url: url, resolvingAgainstBaseURL: false) else {
            print("Dynamic link has no content")
            return
        }

        let tokenSubString = components.path.split(separator: "/").last ?? ""
        let token = String(tokenSubString)

        if token.isEmpty {
            // TODO: Display error if do not have token
        } else {
            DataHolder.shared.verifiedEmailToken = token
        }
    }

}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>BFE7450E-0EFC-49D9-BEF9-E2E033350BF7</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetPlatformFamily</key>
	<string>iphoneos</string>
	<key>IDECodeSnippetSummary</key>
	<string>get Dynamic Link AppDelegate</string>
	<key>IDECodeSnippetTitle</key>
	<string>getDynamicLinkAppDelegate</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
